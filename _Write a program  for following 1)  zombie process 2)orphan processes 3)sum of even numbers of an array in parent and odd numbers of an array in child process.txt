22. Write a program  for following 1)  zombie process 2)orphan processes 3)sum of even numbers of an array in parent and odd numbers of an array in child process


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>


// Function to handle zombie processes
void handle_zombie_processes() {
    pid_t pid;
    int status;


    // Wait for child processes to terminate to avoid zombie processes
    while ((pid = waitpid(-1, &status, WNOHANG)) > 0) {
        printf("Zombie process with PID %d terminated.\n", pid);
    }
}


// Function to calculate the sum of even numbers in the parent process
int sum_even_numbers(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 == 0) {
            sum += arr[i];
        }
    }
    return sum;
}


// Function to calculate the sum of odd numbers in the child process
int sum_odd_numbers(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 != 0) {
            sum += arr[i];
        }
    }
    return sum;
}


int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int size = sizeof(arr) / sizeof(arr[0]);


    pid_t pid = fork();


    if (pid == -1) {
        printf("Fork failed.\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        printf("Child process (PID: %d) started.\n", getpid());
        int odd_sum = sum_odd_numbers(arr, size);
        printf("Sum of odd numbers: %d\n", odd_sum);
        printf("Child process (PID: %d) terminated.\n", getpid());
    } else {
        // Parent process
        printf("Parent process (PID: %d) started.\n", getpid());
        int even_sum = sum_even_numbers(arr, size);
        printf("Sum of even numbers: %d\n", even_sum);
        handle_zombie_processes();
        printf("Parent process (PID: %d) terminated.\n", getpid());
    }


    return 0;
}