15. #include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>


using namespace std;


// Function to calculate page faults using FIFO page replacement
int calculatePageFaults(const vector<int> &pages, int frameSize) {
    unordered_set<int> frames;
    queue<int> indexQueue; // To keep track of the order of pages for FIFO
    int pageFaults = 0;


    for (int page : pages) {
        // If page is not in frame, we have a page fault
        if (frames.find(page) == frames.end()) {
            // If frame is full, remove the oldest page (FIFO order)
            if (frames.size() == frameSize) {
                int oldestPage = indexQueue.front();
                indexQueue.pop();
                frames.erase(oldestPage);
            }
            // Insert the current page and update structures
            frames.insert(page);
            indexQueue.push(page);
            pageFaults++;
        }
    }
    return pageFaults;
}


int main() {
    int n, frameSize;


    cout << "Enter the number of pages in the reference string: ";
    cin >> n;
    vector<int> pages(n);


    cout << "Enter the reference string: ";
    for (int i = 0; i < n; i++) {
        cin >> pages[i];
    }


    cout << "Enter the number of frames: ";
    cin >> frameSize;


    int pageFaults = calculatePageFaults(pages, frameSize);
    cout << "Number of page faults: " << pageFaults << endl;


    return 0;
}