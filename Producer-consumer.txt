EXPERIMENT - 7
NAME - Ayush Sanjay Dhangar                                                   ROLL NO - 42
CLASS - TY_IT-A                                                                        BATCH - 2
DATE OF PERFORMANCE - 24/09/2024


Q. Producer-Consumer Problem using Threads and Semaphores

CODE - 
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h> // For sleep()

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];   // Shared buffer
int count = 0;             // Counter for the buffer

sem_t empty;               // Semaphore to count empty slots
sem_t full;                // Semaphore to count full slots
pthread_mutex_t mutex;     // Mutex to protect buffer

// Function to display the buffer state
void display_buffer() {
    printf("Buffer: [ ");
    for (int i = 0; i < BUFFER_SIZE; i++) {
        if (i < count) {
            printf("%d ", buffer[i]);
        } else {
            printf("- ");
        }
    }
    printf("] (Count: %d)\n", count);
}

void* producer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        item = rand() % 100; // Produce an item

        sem_wait(&empty);    // Wait for an empty slot (buffer is not full)
        pthread_mutex_lock(&mutex); // Lock the buffer (enter critical section)

        // Add the produced item to the buffer
        buffer[count++] = item;
        printf("Producer produced: %d\n", item);
        display_buffer(); // Display buffer after production

        pthread_mutex_unlock(&mutex); // Unlock the buffer (exit critical section)
        sem_post(&full);     // Signal that there is a full slot available
        sleep(1);
    }
    pthread_exit(NULL);
}

void* consumer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);     // Wait for a full slot (buffer is not empty)
        pthread_mutex_lock(&mutex); // Lock the buffer (enter critical section)

        // Remove an item from the buffer
        item = buffer[--count];
        printf("Consumer consumed: %d\n", item);
        display_buffer(); // Display buffer after consumption

        pthread_mutex_unlock(&mutex); // Unlock the buffer (exit critical section)
        sem_post(&empty);    // Signal that there is an empty slot available
        sleep(2);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t prod, cons;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially, all slots are empty
    sem_init(&full, 0, 0);             // Initially, no slots are full
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Wait for threads to finish
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Destroy semaphores and mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}



OUTPUT - 

-------------------------------------------------------------------------------------------------------










Q . Producer-Consumer Problem using Threads and Mutex

CODE - 
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];   // Shared buffer
int count = 0;             // Counter for the buffer

pthread_mutex_t mutex;     // Mutex to protect the buffer
pthread_cond_t cond_empty; // Condition variable for empty buffer
pthread_cond_t cond_full;  // Condition variable for full buffer

void* producer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        item = rand() % 100; // Produce an item

        pthread_mutex_lock(&mutex);

        // Wait if buffer is full
        while (count == BUFFER_SIZE) {
            pthread_cond_wait(&cond_empty, &mutex);
        }

        buffer[count++] = item;
        printf("Producer produced: %d\n", item);

        pthread_cond_signal(&cond_full); // Signal that buffer has an item
        pthread_mutex_unlock(&mutex);
        sleep(1);
    }
    pthread_exit(NULL);
}

void* consumer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        pthread_mutex_lock(&mutex);

        // Wait if buffer is empty
        while (count == 0) {
            pthread_cond_wait(&cond_full, &mutex);
        }

        item = buffer[--count];
        printf("Consumer consumed: %d\n", item);

        pthread_cond_signal(&cond_empty); // Signal that buffer has space
        pthread_mutex_unlock(&mutex);
        sleep(2);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t prod, cons;

    // Initialize mutex and condition variables
    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&cond_empty, NULL);
    pthread_cond_init(&cond_full, NULL);

    // Create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Wait for threads to finish
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Destroy mutex and condition variables
    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&cond_empty);
    pthread_cond_destroy(&cond_full);

    return 0;
}

OUTPUT - 




