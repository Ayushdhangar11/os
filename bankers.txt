

Q . BANKERS ALGORITHM -


CODE - 


#include <stdio.h>


int main() {
    int n, m, i, j, k;


    // Taking number of processes and resources from the user
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);


    int alloc[n][m], max[n][m], avail[m], total[m], need[n][m];
    int f[n], ans[n], ind = 0;


    // Input the allocation matrix from the user
    printf("Enter the allocation matrix:\n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < m; j++) {
            printf("P%d, Resource %d: ", i + 1, j + 1);
            scanf("%d", &alloc[i][j]);
        }
    }


    // Input the max matrix from the user
    printf("Enter the max matrix:\n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < m; j++) {
            printf("P%d, Resource %d: ", i + 1, j + 1);
            scanf("%d", &max[i][j]);
        }
    }


    // Input the total resources vector from the user
    printf("Enter the total resources vector:\n");
    for(i = 0; i < m; i++) {
        printf("Resource %d: ", i + 1);
        scanf("%d", &total[i]);
    }


    // Calculate available resources (Total - Allocation)
    for(j = 0; j < m; j++) {
        int sum_alloc = 0;
        for(i = 0; i < n; i++) {
            sum_alloc += alloc[i][j];
        }
        avail[j] = total[j] - sum_alloc;
    }


    // Initialize finished flag for all processes
    for(k = 0; k < n; k++) {
        f[k] = 0;
    }


    // Calculate the need matrix
    for(i = 0; i < n; i++) {
        for(j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }


    // Check if the system is in a safe state using the Banker's Algorithm
    int flag = 0;
    int y;
    for(k = 0; k < n; k++) {
        for(i = 0; i < n; i++) {
            if(f[i] == 0) {
                flag = 0;
                for(j = 0; j < m; j++) {
                    if(need[i][j] > avail[j]) {
                        flag = 1;
                        break;
                    }
                }
                if(flag == 0) {
                    ans[ind++] = i;
                    for(y = 0; y < m; y++) {
                        avail[y] += alloc[i][y];
                    }
                    f[i] = 1;
                }
            }
        }
    }


    // Check if all processes are finished
    int safe = 1;
    for(i = 0; i < n; i++) {
        if(f[i] == 0) {
            safe = 0;
            printf("The system is not in a safe state.\n");
            break;
        }
    }


    // Output matrices
    printf("\nAllocation Matrix:\n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < m; j++) {
            printf("%d ", alloc[i][j]);
        }
        printf("\n");
    }


    printf("\nMax Matrix:\n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < m; j++) {
            printf("%d ", max[i][j]);
        }
        printf("\n");
    }


    printf("\nNeed Matrix:\n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < m; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }


    printf("\nAvailable Vector:\n");
    for(i = 0; i < m; i++) {
        printf("%d ", avail[i]);
    }
    printf("\n");


    // If the system is safe, print the safe sequence
    if(safe) {
        printf("\nFollowing is the SAFE Sequence:\n");
        for(i = 0; i < n - 1; i++) {
            printf("P%d -> ", ans[i]);
        }
        printf("P%d\n", ans[n - 1]);
    }


    return 0;
}


### Explanation of the Code

The given code implements the **Banker's Algorithm**, which is used to determine whether a system is in a **safe state** for process execution in an operating system. This algorithm helps prevent deadlock by ensuring that resources are allocated to processes in such a way that a safe sequence of process executions exists. The safe sequence guarantees that processes can be executed without causing deadlock.

### Key Concepts in Operating Systems (OS)

1. **Banker's Algorithm**:
   - The **Banker's Algorithm** is a **deadlock avoidance** algorithm that checks the safety of the system before allocating resources to processes.
   - It ensures that the system will remain in a safe state, meaning there exists a sequence of processes such that each process can get the required resources and finish execution without causing a deadlock.
   - The system is considered to be in a **safe state** if there is a sequence of processes that can be executed such that each process can complete its execution with the resources available at that point, considering the maximum resources it may need.

2. **Safe State and Unsafe State**:
   - **Safe State**: A state where the system can allocate resources in such a way that every process can eventually finish execution without causing a deadlock.
   - **Unsafe State**: A state where no such sequence exists, and the system might encounter a deadlock if resources are allocated.

3. **Deadlock**:
   - A **deadlock** occurs when a set of processes are in a state where each process is waiting for a resource that another process holds, leading to a circular wait. The Banker's algorithm helps avoid such situations by ensuring the system stays in a safe state.

4. **Process States**:
   - Processes can be in one of the following states:
     - **Running**: Currently executing on the CPU.
     - **Waiting**: Waiting for a resource to become available.
     - **Ready**: Ready to execute when the CPU becomes available.
   
   The Banker's algorithm checks whether processes can eventually transition from the waiting state to the running state without causing a deadlock.

### Data Structures Used in the Code

- **Allocation Matrix (`alloc`)**: 
  - This matrix represents the resources currently allocated to each process. `alloc[i][j]` indicates the number of resources of type `j` allocated to process `i`.
  
- **Max Matrix (`max`)**:
  - This matrix represents the maximum number of resources each process may need to complete. `max[i][j]` indicates the maximum number of resources of type `j` process `i` may request.
  
- **Available Vector (`avail`)**:
  - This vector represents the number of available resources of each type. It is calculated by subtracting the total number of allocated resources from the total available resources.

- **Need Matrix (`need`)**:
  - This matrix is derived from the `max` and `alloc` matrices. It represents the remaining resources required by each process to complete its execution. `need[i][j] = max[i][j] - alloc[i][j]`.

- **Finished Flag (`f`)**:
  - This array is used to mark whether a process has completed its execution or not. `f[i] = 1` means process `i` is finished, and `f[i] = 0` means it is not finished.

- **Safe Sequence (`ans`)**:
  - This array stores the safe sequence of processes if one exists. If the system is in a safe state, `ans[]` will hold the sequence in which the processes can safely execute.

### Code Walkthrough

1. **Input**:
   - The code starts by taking the number of processes (`n`) and resources (`m`) as input from the user.
   - It then prompts the user to input:
     - The **allocation matrix**: Which resources are currently allocated to each process.
     - The **maximum matrix**: The maximum number of resources each process will ever need.
     - The **total resources vector**: The total number of resources of each type available in the system.

2. **Calculating Available Resources**:
   - The code computes the **available resources** by subtracting the total allocated resources from the total resources available for each resource type.
   - This is done in the `avail[]` array.

3. **Calculating the Need Matrix**:
   - The `need[i][j]` matrix is computed by subtracting the allocated resources (`alloc[i][j]`) from the maximum resources (`max[i][j]`) for each process.

4. **Safety Check** (Banker's Algorithm):
   - The algorithm iterates over all processes and tries to find a process whose needs can be satisfied with the available resources.
   - A process can be safely executed if its **needs** for each resource type are less than or equal to the **available resources**. If so, the process is marked as finished (`f[i] = 1`), and its allocated resources are added to the available resources.
   - The algorithm continues this process until all processes are either finished or no further process can be safely executed.
   - If all processes are finished successfully, the system is in a **safe state** and the safe sequence is printed.

5. **Safe Sequence**:
   - The safe sequence of process execution is stored in the `ans[]` array.
   - The system is in a **safe state** if all processes are finished and there is a valid sequence in which processes can be executed. If even one process cannot be safely executed, the system is in an **unsafe state**.

6. **Output**:
   - The code outputs:
     - The **allocation matrix**: Displays how many resources are currently allocated to each process.
     - The **max matrix**: Displays the maximum resources each process may need.
     - The **need matrix**: Displays the remaining resources each process needs to complete.
     - The **available resources** vector.
     - The **safe sequence** (if the system is in a safe state).

7. **Final Check**:
   - If the system is in a safe state, it prints the safe sequence; otherwise, it prints that the system is not in a safe state.

### Theory Behind Banker's Algorithm

1. **Safety Algorithm**:
   - The Banker's Algorithm operates by checking if the system can allocate resources to a process in such a way that all processes can eventually complete.
   - It ensures that resource allocation is done in a manner that avoids deadlock by checking for a **safe sequence**.

2. **Key Steps in Banker's Algorithm**:
   - **Step 1**: Calculate the `avail[]` array (available resources).
   - **Step 2**: Calculate the `need[][]` array (remaining resources for each process).
   - **Step 3**: Find a process whose resource needs can be met with the current available resources.
   - **Step 4**: Allocate resources to the process, and update the available resources.
   - **Step 5**: Repeat the process until all processes are finished or no more processes can be safely executed.

3. **Deadlock Avoidance**:
   - By checking if the system is in a safe state, the Banker's algorithm avoids situations where a set of processes could end up waiting indefinitely for resources, leading to deadlock.

4. **Limitations**:
   - The Banker's algorithm requires knowledge of the **maximum resource needs** of each process in advance, which may not always be practical or feasible.
   - It is most useful in systems with a small number of processes and resources, as the algorithm can become complex and slow for large systems.

### Conclusion

The Banker's Algorithm is an essential algorithm for ensuring that a system does not enter an unsafe state where deadlock may occur. By carefully managing the allocation of resources and always checking for a safe execution sequence, this algorithm prevents resource allocation conflicts that could lead to deadlock in multi-process environments.
