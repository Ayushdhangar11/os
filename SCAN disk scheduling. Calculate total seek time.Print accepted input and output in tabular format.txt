#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <cstdlib>
#include <ctime>

int max = 199, min = 0;

void Sort(std::vector<int>& arr, int n)
{
    std::sort(arr.begin(), arr.end());
}

void Scan(std::vector<int>& arr, int head, int n)
{
    int index;
    Sort(arr, n);

    // Calculate head position
    for (int i = 0; i < n; i++)
    {
        if (arr[i] == head)
        {
            index = i;
            break;
        }
    }

    // Scan:
    for (int i = index; i < n - 1; i++)
    {
        std::cout << "\nHead moved from " << arr[i] << " to " << arr[i + 1];
    }
    std::cout << "\nHead moved from " << arr[n - 1] << " to " << max;
    std::cout << "\nHead moved from " << max << " to " << arr[index - 1];
    for (int i = index - 1; i > 0; i--)
    {
        std::cout << "\nHead moved from " << arr[i] << " to " << arr[i - 1];
    }

    int seek = std::abs(max - head) + std::abs(max - arr[0]);
    std::cout << "\nScan Seek time= " << seek;
}

void simulateInput(int& n, std::vector<int>& arr, int& head)
{
    // Seed random number generator
    std::srand(static_cast<unsigned int>(std::time(0)));

    // Random number of requests between 5 and 10
    n = std::rand() % 6 + 5;  
    std::cout << "Simulating " << n << " requests:\n";

    // Generate random disk requests between min and max
    arr.clear();
    for (int i = 0; i < n; i++)
    {
        arr.push_back(std::rand() % (max + 1));  // Generate random number between 0 and 199
    }

    // Generate a random head position
    head = std::rand() % (max + 1);  
    std::cout << "Generated requests: ";
    for (int i = 0; i < n; i++)
    {
        std::cout << arr[i] << " ";
    }
    std::cout << "\nGenerated head: " << head << "\n";
}

int main()
{
    int n, head;
    std::vector<int> arr;

    // Simulate the input values
    simulateInput(n, arr, head);

    // Add the head position to the request list
    arr.push_back(head);

    // Call the Scan function
    Scan(arr, head, n + 1);

    return 0;
}
