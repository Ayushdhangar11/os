Non-preemptive 


#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>


using namespace std;


struct Process {
    int pid;             // Process ID
    int arrivalTime;     // Arrival Time of process
    int burstTime;       // Burst Time of process
    int priority;        // Priority of process (lower value = higher priority)
    int finishTime;      // Finish Time of process
    int turnaroundTime;  // Turnaround Time of process
    int waitingTime;     // Waiting Time of process
    bool completed = false; // Status to mark completion
};


// Function to calculate times using Non-Preemptive Priority Scheduling
void calculateNonPreemptivePriority(vector<Process>& processes) {
    int currentTime = 0;
    int completedProcesses = 0;
    int n = processes.size();


    while (completedProcesses < n) {
        int highestPriorityIndex = -1;
        int highestPriority = INT_MAX;


        // Find the process with the highest priority among those that have arrived
        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && processes[i].arrivalTime <= currentTime && processes[i].priority < highestPriority) {
                highestPriorityIndex = i;
                highestPriority = processes[i].priority;
            }
        }


        if (highestPriorityIndex != -1) {
            // Execute the selected process
            currentTime += processes[highestPriorityIndex].burstTime;
            processes[highestPriorityIndex].finishTime = currentTime;
            processes[highestPriorityIndex].turnaroundTime = processes[highestPriorityIndex].finishTime - processes[highestPriorityIndex].arrivalTime;
            processes[highestPriorityIndex].waitingTime = processes[highestPriorityIndex].turnaroundTime - processes[highestPriorityIndex].burstTime;
            processes[highestPriorityIndex].completed = true;
            completedProcesses++;
        } else {
            currentTime++;
        }
    }
}


void displayResults(const vector<Process>& processes, ofstream& outFile) {
    outFile << "PID\tArrival\tBurst\tPriority\tFinish\tTurnaround\tWaiting\n";
    for (const auto& process : processes) {
        outFile << process.pid << "\t"
                << process.arrivalTime << "\t"
                << process.burstTime << "\t"
                << process.priority << "\t\t"
                << process.finishTime << "\t"
                << process.turnaroundTime << "\t\t"
                << process.waitingTime << endl;
    }
}


int main() {
    ifstream inFile("input.txt");
    ofstream outFile("output.txt");


    int n;
    inFile >> n;


    vector<Process> processes(n);
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        inFile >> processes[i].arrivalTime >> processes[i].burstTime >> processes[i].priority;
    }


    // Calculate times for Non-Preemptive Priority Scheduling
    calculateNonPreemptivePriority(processes);
    displayResults(processes, outFile);


    inFile.close();
    outFile.close();


    cout << "Results written to output.txt" << endl;
    return 0;
}


Preemptive -
#include <iostream>
#include <fstream>
#include <vector>
#include <climits>


using namespace std;


struct Process {
    int pid;
    int arrivalTime;
    int burstTime;
    int remainingTime; // Remaining time for preemptive scheduling
    int priority;
    int finishTime;
    int turnaroundTime;
    int waitingTime;
};


// Function to calculate times using Preemptive Priority Scheduling
void calculatePreemptivePriority(vector<Process>& processes) {
    int currentTime = 0;
    int completedProcesses = 0;
    int n = processes.size();


    for (auto& process : processes) {
        process.remainingTime = process.burstTime;
    }


    while (completedProcesses < n) {
        int highestPriorityIndex = -1;
        int highestPriority = INT_MAX;


        // Find the process with the highest priority among those that have arrived
        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0 && processes[i].priority < highestPriority) {
                highestPriorityIndex = i;
                highestPriority = processes[i].priority;
            }
        }


        if (highestPriorityIndex != -1) {
            processes[highestPriorityIndex].remainingTime--;
            currentTime++;


            // If the process is completed
            if (processes[highestPriorityIndex].remainingTime == 0) {
                processes[highestPriorityIndex].finishTime = currentTime;
                processes[highestPriorityIndex].turnaroundTime = processes[highestPriorityIndex].finishTime - processes[highestPriorityIndex].arrivalTime;
                processes[highestPriorityIndex].waitingTime = processes[highestPriorityIndex].turnaroundTime - processes[highestPriorityIndex].burstTime;
                completedProcesses++;
            }
        } else {
            currentTime++;
        }
    }
}


int main() {
    ifstream inFile("input.txt");
    ofstream outFile("output.txt");


    int n;
    inFile >> n;


    vector<Process> processes(n);
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        inFile >> processes[i].arrivalTime >> processes[i].burstTime >> processes[i].priority;
    }


    // Calculate times for Preemptive Priority Scheduling
    calculatePreemptivePriority(processes);
    displayResults(processes, outFile);


    inFile.close();
    outFile.close();


    cout << "Results written to output.txt" << endl;
    return 0;
}