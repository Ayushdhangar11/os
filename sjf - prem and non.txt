Non - preem


#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

struct Process {
    int pid;             // Process ID
    int arrivalTime;     // Arrival Time of process
    int burstTime;       // Burst Time of process
    int finishTime;      // Finish Time of process
    int turnaroundTime;  // Turnaround Time of process
    int waitingTime;     // Waiting Time of process
    bool completed = false; // Status to mark completion
};

// Function to calculate times using Non-Preemptive SJF
void calculateNonPreemptiveSJF(vector<Process>& processes) {
    int currentTime = 0;
    int completedProcesses = 0;
    int n = processes.size();

    while (completedProcesses < n) {
        int minBurstIndex = -1;
        int minBurstTime = INT_MAX;

        // Find the process with the shortest burst time among those that have arrived
        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && processes[i].arrivalTime <= currentTime && processes[i].burstTime < minBurstTime) {
                minBurstIndex = i;
                minBurstTime = processes[i].burstTime;
            }
        }

        if (minBurstIndex != -1) {
            // Update times for the selected process
            currentTime += processes[minBurstIndex].burstTime;
            processes[minBurstIndex].finishTime = currentTime;
            processes[minBurstIndex].turnaroundTime = processes[minBurstIndex].finishTime - processes[minBurstIndex].arrivalTime;
            processes[minBurstIndex].waitingTime = processes[minBurstIndex].turnaroundTime - processes[minBurstIndex].burstTime;
            processes[minBurstIndex].completed = true;
            completedProcesses++;
        } else {
            currentTime++;
        }
    }
}

void displayResults(const vector<Process>& processes) {
    cout << "PID\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n";
    for (const auto& process : processes) {
        cout << process.pid << "\t"
             << process.arrivalTime << "\t"
             << process.burstTime << "\t"
             << process.finishTime << "\t"
             << process.turnaroundTime << "\t\t"
             << process.waitingTime << endl;
    }
}

int main() {
    // Hardcoded input for processes
    int n = 4;
    vector<Process> processes = {
        {1, 0, 6, 0, 0, 0, false},   // Process 1: Arrival Time = 0, Burst Time = 6
        {2, 1, 8, 0, 0, 0, false},   // Process 2: Arrival Time = 1, Burst Time = 8
        {3, 2, 7, 0, 0, 0, false},   // Process 3: Arrival Time = 2, Burst Time = 7
        {4, 3, 3, 0, 0, 0, false}    // Process 4: Arrival Time = 3, Burst Time = 3
    };

    // Calculate times for Non-Preemptive SJF
    calculateNonPreemptiveSJF(processes);

    // Display results
    cout << "\nNon-Preemptive SJF Results:\n";
    displayResults(processes);

    return 0;
}







Prem -
#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

struct Process {
    int pid;             // Process ID
    int arrivalTime;     // Arrival Time of process
    int burstTime;       // Burst Time of process
    int remainingTime;   // Remaining time for preemptive scheduling
    int finishTime;      // Finish Time of process
    int turnaroundTime;  // Turnaround Time of process
    int waitingTime;     // Waiting Time of process
};

// Function to display the results
void displayResults(const vector<Process>& processes) {
    cout << "PID\tArrival Time\tBurst Time\tFinish Time\tTurnaround Time\tWaiting Time" << endl;
    for (const auto& process : processes) {
        cout << process.pid << "\t"
             << process.arrivalTime << "\t\t"
             << process.burstTime << "\t\t"
             << process.finishTime << "\t\t"
             << process.turnaroundTime << "\t\t"
             << process.waitingTime << endl;
    }
}

// Function to calculate times using Preemptive SJF (SRTF)
void calculatePreemptiveSJF(vector<Process>& processes) {
    int currentTime = 0;
    int completedProcesses = 0;
    int n = processes.size();

    for (auto& process : processes) {
        process.remainingTime = process.burstTime;
    }

    while (completedProcesses < n) {
        int minRemainingIndex = -1;
        int minRemainingTime = INT_MAX;

        // Find the process with the shortest remaining time among those that have arrived
        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0 && processes[i].remainingTime < minRemainingTime) {
                minRemainingIndex = i;
                minRemainingTime = processes[i].remainingTime;
            }
        }

        if (minRemainingIndex != -1) {
            processes[minRemainingIndex].remainingTime--;
            currentTime++;

            // If process is completed
            if (processes[minRemainingIndex].remainingTime == 0) {
                processes[minRemainingIndex].finishTime = currentTime;
                processes[minRemainingIndex].turnaroundTime = processes[minRemainingIndex].finishTime - processes[minRemainingIndex].arrivalTime;
                processes[minRemainingIndex].waitingTime = processes[minRemainingIndex].turnaroundTime - processes[minRemainingIndex].burstTime;
                completedProcesses++;
            }
        } else {
            currentTime++;
        }
    }
}

int main() {
    // Hardcoded input for processes
    int n = 4;
    vector<Process> processes = {
        {1, 0, 8, 0, 0, 0, 0},   // Process 1: Arrival Time = 0, Burst Time = 8
        {2, 1, 4, 0, 0, 0, 0},   // Process 2: Arrival Time = 1, Burst Time = 4
        {3, 2, 9, 0, 0, 0, 0},   // Process 3: Arrival Time = 2, Burst Time = 9
        {4, 3, 5, 0, 0, 0, 0}    // Process 4: Arrival Time = 3, Burst Time = 5
    };

    // Calculate times for Preemptive SJF
    calculatePreemptiveSJF(processes);

    // Display results
    cout << "\nPreemptive SJF Results:\n";
    displayResults(processes);

    return 0;
}
