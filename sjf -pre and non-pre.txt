NON-preemptive


#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>


using namespace std;


struct Process {
    int pid;
    int arrivalTime;
    int burstTime;
    int finishTime;
    int turnaroundTime;
    int waitingTime;
    bool completed = false;
};


void calculateNonPreemptiveSJF(vector<Process>& processes) {
    int currentTime = 0;
    int completedProcesses = 0;
    int n = processes.size();


    while (completedProcesses < n) {
        int minBurstIndex = -1;
        int minBurstTime = INT_MAX;


        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && processes[i].arrivalTime <= currentTime && processes[i].burstTime < minBurstTime) {
                minBurstIndex = i;
                minBurstTime = processes[i].burstTime;
            }
        }


        if (minBurstIndex != -1) {
            currentTime += processes[minBurstIndex].burstTime;
            processes[minBurstIndex].finishTime = currentTime;
            processes[minBurstIndex].turnaroundTime = processes[minBurstIndex].finishTime - processes[minBurstIndex].arrivalTime;
            processes[minBurstIndex].waitingTime = processes[minBurstIndex].turnaroundTime - processes[minBurstIndex].burstTime;
            processes[minBurstIndex].completed = true;
            completedProcesses++;
        } else {
            currentTime++;
        }
    }
}


void displayResults(const vector<Process>& processes, ofstream& outFile) {
    outFile << "PID\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n";
    for (const auto& process : processes) {
        outFile << process.pid << "\t"
                << process.arrivalTime << "\t"
                << process.burstTime << "\t"
                << process.finishTime << "\t"
                << process.turnaroundTime << "\t\t"
                << process.waitingTime << endl;
    }
}


int main() {
    ifstream inFile("input.txt");
    ofstream outFile("output.txt");


    int n;
    inFile >> n;


    vector<Process> processes(n);
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        inFile >> processes[i].arrivalTime >> processes[i].burstTime;
    }


    calculateNonPreemptiveSJF(processes);
    displayResults(processes, outFile);


    inFile.close();
    outFile.close();


    cout << "Results written to output.txt" << endl;
    return 0;
}




Preemptive -
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>


using namespace std;


struct Process {
    int pid;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int finishTime;
    int turnaroundTime;
    int waitingTime;
};


void calculatePreemptiveSJF(vector<Process>& processes) {
    int currentTime = 0;
    int completedProcesses = 0;
    int n = processes.size();


    for (auto& process : processes) {
        process.remainingTime = process.burstTime;
    }


    while (completedProcesses < n) {
        int minRemainingIndex = -1;
        int minRemainingTime = INT_MAX;


        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0 && processes[i].remainingTime < minRemainingTime) {
                minRemainingIndex = i;
                minRemainingTime = processes[i].remainingTime;
            }
        }


        if (minRemainingIndex != -1) {
            processes[minRemainingIndex].remainingTime--;
            currentTime++;


            if (processes[minRemainingIndex].remainingTime == 0) {
                processes[minRemainingIndex].finishTime = currentTime;
                processes[minRemainingIndex].turnaroundTime = processes[minRemainingIndex].finishTime - processes[minRemainingIndex].arrivalTime;
                processes[minRemainingIndex].waitingTime = processes[minRemainingIndex].turnaroundTime - processes[minRemainingIndex].burstTime;
                completedProcesses++;
            }
        } else {
            currentTime++;
        }
    }
}


void displayResults(const vector<Process>& processes, ofstream& outFile) {
    outFile << "PID\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n";
    for (const auto& process : processes) {
        outFile << process.pid << "\t"
                << process.arrivalTime << "\t"
                << process.burstTime << "\t"
                << process.finishTime << "\t"
                << process.turnaroundTime << "\t\t"
                << process.waitingTime << endl;
    }
}


int main() {
    ifstream inFile("input.txt");
    ofstream outFile("output.txt");


    int n;
    inFile >> n;


    vector<Process> processes(n);
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        inFile >> processes[i].arrivalTime >> processes[i].burstTime;
    }


    calculatePreemptiveSJF(processes);
    displayResults(processes, outFile);


    inFile.close();
    outFile.close();


    cout << "Results written to output.txt" << endl;
    return 0;
}