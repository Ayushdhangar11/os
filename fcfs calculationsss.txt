#include <iostream>
#include <vector>


using namespace std;


struct Process {
    int pid;           // Process ID
    int arrivalTime;   // Arrival Time of process
    int burstTime;     // Burst Time of process
    int finishTime;    // Finish Time of process
    int turnaroundTime; // Turnaround Time of process
    int waitingTime;   // Waiting Time of process
};


// Function to calculate finish time, turnaround time, and waiting time
void calculateTimes(vector<Process>& processes) {
    int currentTime = 0;
    
    for (auto& process : processes) {
        // Finish time for each process is the current time plus burst time
        currentTime = max(currentTime, process.arrivalTime) + process.burstTime;
        process.finishTime = currentTime;


        // Turnaround time = Finish time - Arrival time
        process.turnaroundTime = process.finishTime - process.arrivalTime;


        // Waiting time = Turnaround time - Burst time
        process.waitingTime = process.turnaroundTime - process.burstTime;
    }
}


void displayResults(const vector<Process>& processes) {
    cout << "PID\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n";
    for (const auto& process : processes) {
        cout << process.pid << "\t" 
             << process.arrivalTime << "\t"
             << process.burstTime << "\t" 
             << process.finishTime << "\t"
             << process.turnaroundTime << "\t\t" 
             << process.waitingTime << endl;
    }
}


int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;


    vector<Process> processes(n);
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        cout << "Enter Arrival Time and Burst Time for Process " << processes[i].pid << ": ";
        cin >> processes[i].arrivalTime >> processes[i].burstTime;
    }


    // Calculate the times for each process
    calculateTimes(processes);


    // Display the results
    displayResults(processes);


    return 0;
}

### Explanation of the Code:

This C++ program implements a simple **First Come, First Served (FCFS)** scheduling algorithm for processes. It calculates and displays important metrics like **turnaround time**, **waiting time**, and **finish time** for each process. Below is a step-by-step explanation of how the program works and the OS concepts used.

### Program Flow:
1. **Process Structure (`struct Process`)**:
   - A structure `Process` is defined to hold information about each process, including:
     - `pid`: Process ID (unique identifier for each process)
     - `arrivalTime`: The time at which the process arrives in the ready queue.
     - `burstTime`: The amount of CPU time the process needs for execution.
     - `finishTime`: The time at which the process finishes its execution.
     - `turnaroundTime`: The total time a process takes from arrival to completion (i.e., finish time - arrival time).
     - `waitingTime`: The total time a process spends waiting in the ready queue (i.e., turnaround time - burst time).

2. **Input Section**:
   - The program first asks for the number of processes (`n`).
   - Then, it takes the arrival time and burst time for each process and stores them in a vector `processes`. Each process is assigned a unique ID (starting from 1).

3. **`calculateTimes` Function**:
   - This function is used to calculate the `finishTime`, `turnaroundTime`, and `waitingTime` for each process based on its arrival time and burst time.
   - **Algorithm**:
     - It iterates through the `processes` vector.
     - For each process:
       - The **finish time** is calculated by adding the `burstTime` to the current time (keeping track of the time as each process executes).
       - **Turnaround time** is calculated as `finishTime - arrivalTime` (the total time taken by the process, including both waiting and execution time).
       - **Waiting time** is calculated as `turnaroundTime - burstTime` (the time the process spends waiting in the ready queue).
   - **Note**: `currentTime` is updated dynamically based on the process that finishes, and it ensures that processes that arrive later don’t start before their arrival time.

4. **`displayResults` Function**:
   - After calculating the necessary times, the `displayResults` function prints the results for each process:
     - Process ID (`PID`), Arrival Time, Burst Time, Finish Time, Turnaround Time, and Waiting Time.
   - The output is formatted in a tabular format for better clarity.

5. **Main Function**:
   - This function handles user input and organizes the execution:
     - First, it asks for the number of processes.
     - Then, for each process, the user inputs the arrival and burst times.
     - After that, the `calculateTimes` function is called to compute the times.
     - Finally, the results are displayed using the `displayResults` function.

---

### OS Concepts and Theoretical Background:

This program demonstrates the **FCFS (First-Come, First-Served)** scheduling algorithm, a fundamental concept in operating systems. Let’s go over the key OS concepts involved:

#### 1. **Process Scheduling**:
   - **Process Scheduling** is the activity of the operating system that manages the execution of processes. It involves deciding which process will be given the CPU next.
   - In this program, we are calculating and simulating the execution of processes using the **FCFS scheduling algorithm**.

#### 2. **FCFS Scheduling Algorithm**:
   - **FCFS** is one of the simplest scheduling algorithms. In FCFS:
     - Processes are executed in the order in which they arrive in the ready queue.
     - The first process to arrive gets executed first, and the next process waits until the current one finishes.
   - This program implements FCFS in the sense that the processes are executed in the order of their **arrival time** (the earliest arriving process is executed first).

#### 3. **Key Metrics**:
   The program calculates the following performance metrics for each process:
   
   - **Arrival Time**: This is the time at which the process enters the ready queue. It’s given by the user.
   - **Burst Time**: This is the time a process needs to complete its execution (CPU time required).
   - **Finish Time**: This is the time when a process completes its execution. In this implementation, it’s calculated by adding the burst time to the current time and ensuring that it doesn't start before its arrival time.
   - **Turnaround Time**: This is the total time a process takes to complete, which includes both the waiting time and the burst time. It is calculated as:
     \[
     \text{Turnaround Time} = \text{Finish Time} - \text{Arrival Time}
     \]
   - **Waiting Time**: This is the total time a process spends in the ready queue waiting for the CPU. It’s the difference between the turnaround time and the burst time:
     \[
     \text{Waiting Time} = \text{Turnaround Time} - \text{Burst Time}
     \]

#### 4. **CPU Scheduling**:
   - **CPU Scheduling** refers to the technique used by an OS to manage the execution of processes by deciding which process gets the CPU.
   - The program calculates the times for each process based on its arrival and burst times using FCFS, which is a non-preemptive scheduling algorithm. This means that once a process starts executing, it runs to completion without being interrupted.

#### 5. **Non-preemptive Scheduling**:
   - **Non-preemptive** scheduling means that a process cannot be stopped or preempted once it starts executing. The only way a process can stop is when it finishes its burst time.
   - FCFS is **non-preemptive**, as a process will not be interrupted once it starts its execution until it finishes its burst time.

#### 6. **Gantt Chart**:
   - A **Gantt Chart** is often used to visualize process scheduling. While this code does not generate a Gantt chart directly, you could modify the program to print the Gantt chart representation of process execution, showing when each process starts and finishes over time.

#### 7. **Scheduling Performance**:
   - **Turnaround Time** and **Waiting Time** are key metrics for evaluating the performance of a scheduling algorithm. 
   - **Average Turnaround Time** and **Average Waiting Time** can be used to compare different scheduling algorithms. For example, **FCFS** is simple but can lead to high waiting times, especially when short processes arrive after long ones.

### Example Output:

If you enter 3 processes with the following arrival and burst times:

```
Process 1: Arrival = 0, Burst = 5
Process 2: Arrival = 1, Burst = 3
Process 3: Arrival = 2, Burst = 4
```

The output might look like this:

```
PID    Arrival    Burst    Finish   Turnaround    Waiting
1      0          5        5        5             0
2      1          3        8        7             4
3      2          4        12       10            6
```

- **PID 1** starts at time 0, finishes at time 5. Its turnaround time is 5 (finish - arrival), and its waiting time is 0 (turnaround - burst).
- **PID 2** arrives at time 1, but waits until PID 1 finishes at time 5, so it starts at time 5 and finishes at time 8. Its waiting time is 4.
- **PID 3** arrives at time 2, waits for both PID 1 and PID 2 to finish, so it starts at time 8 and finishes at time 12. Its waiting time is 6.

---

### Summary:
This program implements a simple **First Come, First Served (FCFS)** process scheduling algorithm. It calculates the **turnaround time**, **waiting time**, and **finish time** for each process based on its arrival time and burst time. The concepts involved in this program include **process scheduling**, **non-preemptive scheduling**, and key performance metrics for scheduling algorithms. The FCFS algorithm is simple to implement but may not always be the most efficient, especially for processes with large variance in burst times.
