
1. Design menu driven application demonstrating use of different system calls.
1. process related system call:fork,exit, wait,
2) file realted system call: open,read,write,close,link,unlink,stat
3) communication system call:pipe,fifo,
4)information related system call

cpp

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <sys/stat.h>

#define FIFO_NAME "/tmp/my_fifo"

// Function to simulate the process-related menu choices
void process_menu() {
    pid_t pid;

    // Simulated choices for process-related system calls
    pid = fork();
    if (pid == -1) {
        perror("fork failed");
    } else if (pid == 0) {
        printf("Child process created. PID: %d\n", getpid());
        exit(0);  // Child process exits
    } else {
        printf("Parent process. PID: %d, Child PID: %d\n", getpid(), pid);
        wait(NULL); // Parent waits for child to finish
        printf("Parent process resumes. Child process terminated.\n");
    }

    pid = fork();
    if (pid == -1) {
        perror("fork failed");
    } else if (pid == 0) {
        printf("Child process. Exiting with PID: %d\n", getpid());
        exit(0);  // Child exits immediately
    } else {
        wait(NULL); // Parent waits for child to finish
        printf("Parent process. Child process terminated with PID: %d\n", pid);
    }
}

// Function to simulate the file-related menu choices
void file_menu() {
    int fd;
    char buffer[1024];
    ssize_t bytes;

    // Simulated file system calls
    fd = open("example.txt", O_CREAT | O_RDWR, 0666);
    if (fd == -1) {
        perror("open failed");
    } else {
        printf("File opened successfully. FD: %d\n", fd);
    }

    bytes = read(fd, buffer, sizeof(buffer));
    if (bytes == -1) {
        perror("read failed");
    } else {
        printf("Read %ld bytes: %s\n", bytes, buffer);
    }

    printf("Enter text to write to file: ");
    snprintf(buffer, sizeof(buffer), "Hello from write simulation!");
    bytes = write(fd, buffer, sizeof(buffer));
    if (bytes == -1) {
        perror("write failed");
    } else {
        printf("Wrote %ld bytes to file.\n", bytes);
    }

    close(fd);
    printf("File closed successfully.\n");

    if (link("example.txt", "link_example.txt") == -1) {
        perror("link failed");
    } else {
        printf("Link created successfully.\n");
    }

    if (unlink("example.txt") == -1) {
        perror("unlink failed");
    } else {
        printf("File unlinked successfully.\n");
    }

    struct stat fileStat;
    if (stat("example.txt", &fileStat) == -1) {
        perror("stat failed");
    } else {
        printf("File Size: %ld bytes\n", fileStat.st_size);
        printf("Number of Links: %ld\n", fileStat.st_nlink);
        printf("File inode: %ld\n", fileStat.st_ino);
    }
}

// Function to simulate the communication-related system calls menu
void communication_menu() {
    pid_t pid;
    int pipe_fd[2]; // Pipe file descriptors

    // Simulated communication system calls
    if (pipe(pipe_fd) == -1) {
        perror("pipe failed");
        exit(1);
    }

    pid = fork();
    if (pid == -1) {
        perror("fork failed");
        exit(1);
    } else if (pid == 0) {
        // Child process - Write to pipe
        close(pipe_fd[0]); // Close the read end
        char message[] = "Hello from child process!";
        write(pipe_fd[1], message, sizeof(message));
        close(pipe_fd[1]); // Close the write end
        printf("Child process wrote to pipe.\n");
        exit(0);
    } else {
        // Parent process - Read from pipe
        close(pipe_fd[1]); // Close the write end
        char buffer[1024];
        read(pipe_fd[0], buffer, sizeof(buffer));
        printf("Parent process received: %s\n", buffer);
        close(pipe_fd[0]); // Close the read end
        wait(NULL);  // Wait for child process to finish
    }

    // FIFO simulation
    if (mkfifo(FIFO_NAME, 0666) == -1) {
        perror("mkfifo failed");
    }

    pid = fork();
    if (pid == 0) {
        // Child process - Write to FIFO
        int fd = open(FIFO_NAME, O_WRONLY);
        if (fd == -1) {
            perror("FIFO open failed in child");
            exit(1);
        }
        write(fd, "Hello from child process!", 26);
        close(fd);
        printf("Child process wrote to FIFO.\n");
        exit(0);
    } else if (pid > 0) {
        // Parent process - Read from FIFO
        int fd = open(FIFO_NAME, O_RDONLY);
        if (fd == -1) {
            perror("FIFO open failed in parent");
            exit(1);
        }
        char buffer[1024];
        read(fd, buffer, sizeof(buffer));
        printf("Parent process received: %s\n", buffer);
        close(fd);
        wait(NULL);  // Wait for child process to finish
    }
    // Remove FIFO after communication
    unlink(FIFO_NAME);
}

// Function to simulate the information-related system calls menu
void info_menu() {
    // Simulated information system calls
    printf("Current Process ID: %d\n", getpid());
    printf("Parent Process ID: %d\n", getppid());
    printf("User ID: %d\n", getuid());
    printf("Group ID: %d\n", getgid());
}

// Main menu simulation
int main() {
    // Simulate choices in the main menu
    process_menu();  // Simulate Process-related System Calls
    file_menu();     // Simulate File-related System Calls
    communication_menu();  // Simulate Communication System Calls
    info_menu();  // Simulate Information System Calls

    printf("Exiting the program.\n");
    exit(0);
}

