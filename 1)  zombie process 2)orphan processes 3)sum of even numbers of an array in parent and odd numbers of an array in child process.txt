22. Write a program  for following 1)  zombie process 2)orphan processes 3)sum of even numbers of an array in parent and odd numbers of an array in child process


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>


// Function to handle zombie processes
void handle_zombie_processes() {
    pid_t pid;
    int status;


    // Wait for child processes to terminate to avoid zombie processes
    while ((pid = waitpid(-1, &status, WNOHANG)) > 0) {
        printf("Zombie process with PID %d terminated.\n", pid);
    }
}


// Function to calculate the sum of even numbers in the parent process
int sum_even_numbers(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 == 0) {
            sum += arr[i];
        }
    }
    return sum;
}


// Function to calculate the sum of odd numbers in the child process
int sum_odd_numbers(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 != 0) {
            sum += arr[i];
        }
    }
    return sum;
}


int main() {
    int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int size = sizeof(arr) / sizeof(arr[0]);


    pid_t pid = fork();


    if (pid == -1) {
        printf("Fork failed.\n");
        return 1;
    } else if (pid == 0) {
        // Child process
        printf("Child process (PID: %d) started.\n", getpid());
        int odd_sum = sum_odd_numbers(arr, size);
        printf("Sum of odd numbers: %d\n", odd_sum);
        printf("Child process (PID: %d) terminated.\n", getpid());
    } else {
        // Parent process
        printf("Parent process (PID: %d) started.\n", getpid());
        int even_sum = sum_even_numbers(arr, size);
        printf("Sum of even numbers: %d\n", even_sum);
        handle_zombie_processes();
        printf("Parent process (PID: %d) terminated.\n", getpid());
    }


    return 0;
}

### Explanation of the Code

This C program demonstrates three key concepts in operating systems:
1. **Zombie Processes**
2. **Orphan Processes**
3. **Parent-Child Process Communication for Summing Even and Odd Numbers**

### **Key Concepts Covered:**
1. **Zombie Processes**
2. **Orphan Processes**
3. **Forking and Parent-Child Process Communication**

### 1. **Zombie Processes**:
A **zombie process** occurs when a child process has terminated, but its parent process has not yet read its exit status using `wait()` or `waitpid()`. This means the child process is "dead" but still consumes resources (a Process ID, or PID) until the parent process collects its exit status.

In the program, zombie processes are handled in the `handle_zombie_processes()` function. Here's how the process works:
- The function uses `waitpid()` with the `WNOHANG` flag. This allows the parent process to check if there are any child processes that have terminated without blocking (i.e., it doesn't wait indefinitely if no child has finished).
- If a terminated child process is found, the parent prints a message saying that the child process with the specified PID has been terminated, effectively "cleaning up" the zombie process.

This prevents zombie processes from remaining in the system, freeing up their resources.

### 2. **Orphan Processes**:
An **orphan process** is a process whose parent has terminated, leaving the child process in a "detached" state. The operating system usually assigns orphan processes to the **init process** (PID 1), which becomes their new parent.

In the program, orphan processes are implicitly created when the parent terminates before the child. However, this scenario is not explicitly tested in this code (as the parent waits for the child to finish). If the parent did not wait for the child, the child would become an orphan, and `init` would become its new parent.

### 3. **Forking and Parent-Child Process Communication**:
The program also demonstrates how a parent process and a child process can execute different tasks concurrently after a `fork()` system call:
- The program creates an array of integers from 1 to 10.
- The parent process calculates the sum of **even numbers**, and the child process calculates the sum of **odd numbers**.
- The child process starts by executing the `sum_odd_numbers()` function, and the parent executes the `sum_even_numbers()` function.

#### Process Flow:

- The program begins by defining an array of integers `arr[]` containing the numbers 1 to 10.
- The `fork()` system call is used to create a new process (child process). The `pid` variable holds the return value of `fork()`, which helps distinguish the parent from the child:
  - If `pid == 0`, it means the current process is the **child** process.
  - If `pid > 0`, it means the current process is the **parent** process.
  
- In the **child process** (`pid == 0`):
  - The child calculates the sum of the odd numbers in the array by calling `sum_odd_numbers()`.
  - The sum of the odd numbers is printed, and the child process terminates.
  
- In the **parent process** (`pid > 0`):
  - The parent calculates the sum of the even numbers in the array by calling `sum_even_numbers()`.
  - The parent then calls `handle_zombie_processes()` to handle any potential zombie processes by waiting for the child to terminate.
  - After the child finishes and is handled, the parent process prints its termination message.

### **Detailed Breakdown of Functions:**

- **`handle_zombie_processes()`**:
  - The `waitpid()` system call is used to collect the exit status of the child process. By passing `-1` as the first argument, it waits for any child to finish, and `WNOHANG` ensures it doesn't block if no child has terminated yet.
  - This function is used to avoid **zombie processes** by making the parent collect the exit status of the child immediately after it finishes.

- **`sum_even_numbers()`** and **`sum_odd_numbers()`**:
  - These functions iterate through the array and sum the numbers that meet the condition (even or odd).
  - `sum_even_numbers()` checks for numbers divisible by 2, while `sum_odd_numbers()` checks for numbers not divisible by 2.

### **Operating System Concepts in Play:**

1. **Process Creation and `fork()`**:
   - The `fork()` system call is used to create a child process. After `fork()`, both the parent and child processes continue executing from the point where `fork()` was called. The main distinction is the return value:
     - `0` in the child process
     - A positive value (child’s PID) in the parent process
   - The child process has its own address space, file descriptors, and resources, but it inherits some attributes from the parent, such as environment variables.

2. **Process Termination and `wait()`/`waitpid()`**:
   - When a child process finishes execution, it becomes a **zombie** until the parent process calls `wait()` or `waitpid()` to read the child's exit status.
   - The parent can choose not to wait for the child, leaving the child as a zombie. If the parent process terminates before the child, the child becomes an **orphan** and is adopted by the `init` process (PID 1).

3. **Concurrency**:
   - The parent and child processes run concurrently after the `fork()` system call. The parent and child can perform their respective tasks in parallel, demonstrating how multiprocessing allows multiple tasks to run simultaneously.

4. **Interprocess Communication (IPC)**:
   - While the processes in this program do not directly communicate (e.g., using pipes or message queues), they do share the same memory space for the array, but each process calculates its own part of the task. This can be seen as a form of limited IPC, where the shared memory allows both processes to work on the same data without explicit communication.

### Conclusion:
This program illustrates the concepts of zombie and orphan processes, as well as the basic mechanics of forking child processes and performing parallel computations (summation of even and odd numbers) between a parent and child. It highlights the importance of handling process termination properly to avoid zombies and shows the parent-child relationship that exists between processes in an operating system.
