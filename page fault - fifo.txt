

#include <iostream>
#include <vector>
using namespace std;

#define MAX_FRAMES 10

int main() {
    int frames = 3; // Hardcoded number of frames
    int n = 12; // Hardcoded length of reference string
    int referenceString[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3}; // Hardcoded reference string

    int pageFaults = 0;
    int frameQueue[MAX_FRAMES];
    for (int i = 0; i < frames; i++) {
        frameQueue[i] = -1;  // Initialize frameQueue to -1 (empty)
    }

    int front = 0, rear = 0;

    cout << "\nPage Reference\tPage Faults\n";

    for (int i = 0; i < n; i++) {
        int page = referenceString[i];
        int pageFound = 0;

        // Check if the page is already in frames
        for (int j = 0; j < frames; j++) {
            if (frameQueue[j] == page) {
                pageFound = 1;
                break;
            }
        }

        if (!pageFound) {
            // Page Fault
            pageFaults++;
            if (rear - front == frames) {
                front = (front + 1) % frames;
            }
            frameQueue[rear] = page;
            rear = (rear + 1) % frames;
        }

        cout << page << "\t\t" << pageFaults << endl;
    }

    cout << "\nTotal Page Faults: " << pageFaults << endl;

    return 0;
}

### Explanation of the Code

This C++ program simulates **FIFO (First-In-First-Out)** page replacement algorithm for handling page faults in memory management. Below is a step-by-step breakdown of the code, the concepts used, and the theory related to the operating system's memory management.

### **Key Concepts Covered**:

1. **FIFO Page Replacement Algorithm**
2. **Page Faults**
3. **Memory Management in Operating Systems**

### **Code Explanation**:

#### **1. Setting up the Reference String and Frame Parameters**:

- `frames = 3`: This is the number of pages that can be held in memory at any given time. It is the **frame size** for the page replacement algorithm.
- `n = 12`: The length of the reference string, representing the sequence of page accesses made by the process.
- `referenceString[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3}`: This is the **page reference string**, which is the sequence of page numbers requested by the program.

The `frameQueue[MAX_FRAMES]` is an array representing the frames in memory, which can hold up to `MAX_FRAMES` (10 frames). Initially, all frames are set to `-1`, representing empty frames.

#### **2. FIFO Logic**:

**FIFO (First-In-First-Out)** is a simple page replacement algorithm where the first page to be loaded into memory is the first to be replaced when a new page needs to be loaded. The basic steps in FIFO are:
- If the requested page is already in memory (i.e., in the frames), no page fault occurs.
- If the requested page is not in memory (i.e., a **page fault**), the page is loaded into the first available frame.
- If there are no empty frames, the page that was loaded first (i.e., the page at the **front** of the queue) is replaced with the new page.

#### **3. Data Structures Used**:

- `frameQueue[MAX_FRAMES]`: This array holds the current pages in memory. Initially, all entries are set to `-1`, indicating that the frames are empty.
- `front` and `rear`: These pointers track the positions in the queue where pages are evicted (replaced) and inserted. `front` keeps track of the oldest page (the one to be replaced), and `rear` keeps track of where to insert the new page.

#### **4. Page Fault Detection**:

For each page request in the `referenceString[]`:
- The program checks if the requested page is already present in the frames (using the loop that checks each frame for a match).
- If the page is found in the frames, a **page hit** occurs (i.e., the page is already in memory), and no page fault is counted.
- If the page is not found in any of the frames, a **page fault** occurs, and the page is loaded into memory.

#### **5. FIFO Queue Management**:

- When a page fault occurs, and there is space available in the frames, the page is simply inserted into the frame.
- If all frames are full, the page at the **front** of the queue (the oldest page) is replaced by the new page. This is done using the `front` pointer, and the frame at the `front` is replaced by the new page. The `front` pointer is then incremented (circularly, using modulus arithmetic).
- The `rear` pointer is used to track where the new page should be inserted into the queue. The `rear` is incremented after every page insertion (circularly using modulus arithmetic).

#### **6. Output**:

- For each page reference in the `referenceString[]`, the current page and the number of page faults so far are printed.
- After all pages are processed, the total number of page faults is printed.

### **Theory Related to Operating System (OS)**:

#### **1. Page Faults**:
- A **page fault** occurs when a process attempts to access a page that is not currently in memory. This leads to a need to fetch the page from secondary storage (like disk), which is a slower process.
- The operating system's **page replacement algorithms** (like FIFO, LRU, etc.) are responsible for managing the pages in memory and deciding which pages to replace when a page fault occurs.

#### **2. FIFO (First-In-First-Out) Page Replacement**:
- FIFO is a **non-optimal** page replacement algorithm. It works by replacing the oldest page in memory (the one that has been in memory the longest) whenever a new page needs to be loaded into memory.
- While simple to implement, FIFO does not always result in the minimum number of page faults. For example, it can suffer from **Belady's Anomaly**, where increasing the number of frames can sometimes increase the number of page faults.

#### **3. Frame Allocation**:
- In this code, we use **frame allocation** to limit the number of pages that can be stored in memory at once. This is critical for systems with limited resources, as memory is a finite resource.
- In an OS, the number of frames allocated to a process is usually decided by the memory manager. The OS must balance between keeping enough pages in memory to avoid frequent page faults and not using too much memory, which would affect other processes.

#### **4. Memory Management in OS**:
- Memory management is an essential part of the OS, and page replacement algorithms like FIFO play a crucial role in ensuring that processes can efficiently access the memory they need.
- The OS keeps track of the pages currently in memory (via a **page table** or similar structures) and uses algorithms like FIFO, Least Recently Used (LRU), or Optimal to decide how to manage page faults and frame replacement.

#### **5. Circular Queue Management**:
- The use of **circular queues** for page management allows the FIFO algorithm to operate efficiently, without requiring complex shifting of elements in the queue when replacing pages. Instead, the `front` and `rear` pointers are updated using modulus arithmetic to wrap around the queue, keeping track of where to insert and evict pages.

### **Conclusion**:
This program implements a **FIFO page replacement algorithm** in the context of memory management. It simulates the process of handling page faults when a program accesses pages, and the OS must decide which pages to keep in memory based on the available frame size. The code is a simplified version of how memory management works in an operating system and demonstrates the use of basic data structures like arrays and queues to simulate page replacement.
