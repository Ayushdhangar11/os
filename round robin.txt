#include <iostream>
#include <fstream>
#include <vector>
#include <queue>


using namespace std;


struct Process {
    int pid;             // Process ID
    int arrivalTime;     // Arrival Time of process
    int burstTime;       // Burst Time of process
    int remainingTime;   // Remaining Time (for Round Robin scheduling)
    int finishTime;      // Finish Time of process
    int turnaroundTime;  // Turnaround Time of process
    int waitingTime;     // Waiting Time of process
};


void calculateRoundRobin(vector<Process>& processes, int timeQuantum) {
    int currentTime = 0;
    int completedProcesses = 0;
    int n = processes.size();
    queue<int> readyQueue;


    // Initialize remaining times and mark processes that have arrived at time 0
    for (int i = 0; i < n; i++) {
        processes[i].remainingTime = processes[i].burstTime;
        if (processes[i].arrivalTime <= currentTime) {
            readyQueue.push(i);
        }
    }


    while (completedProcesses < n) {
        if (!readyQueue.empty()) {
            int idx = readyQueue.front();
            readyQueue.pop();


            // Execute the current process for the time quantum or until it completes
            int executionTime = min(timeQuantum, processes[idx].remainingTime);
            processes[idx].remainingTime -= executionTime;
            currentTime += executionTime;


            // Check if the process has completed
            if (processes[idx].remainingTime == 0) {
                processes[idx].finishTime = currentTime;
                processes[idx].turnaroundTime = processes[idx].finishTime - processes[idx].arrivalTime;
                processes[idx].waitingTime = processes[idx].turnaroundTime - processes[idx].burstTime;
                completedProcesses++;
            } else {
                // If the process hasn't completed, add it back to the queue
                readyQueue.push(idx);
            }


            // Add any newly arrived processes to the queue
            for (int i = 0; i < n; i++) {
                if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0 && find(readyQueue.front(), readyQueue.back(), i) == readyQueue.end()) {
                    readyQueue.push(i);
                }
            }
        } else {
            currentTime++;
        }
    }
}


void displayResults(const vector<Process>& processes, ofstream& outFile) {
    outFile << "PID\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n";
    for (const auto& process : processes) {
        outFile << process.pid << "\t"
                << process.arrivalTime << "\t"
                << process.burstTime << "\t"
                << process.finishTime << "\t"
                << process.turnaroundTime << "\t\t"
                << process.waitingTime << endl;
    }
}


int main() {
    ifstream inFile("input.txt");
    ofstream outFile("output.txt");


    int n, timeQuantum;
    inFile >> n >> timeQuantum;


    vector<Process> processes(n);
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        inFile >> processes[i].arrivalTime >> processes[i].burstTime;
    }


    // Calculate times for Round Robin Scheduling
    calculateRoundRobin(processes, timeQuantum);
    displayResults(processes, outFile);


    inFile.close();
    outFile.close();


    cout << "Results written to output.txt" << endl;
    return 0;
}