#include <iostream>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <ctime>

using namespace std;

void simulateInput(int &n, vector<int> &RQ, int &initial) {
    // Seed random number generator
    srand(static_cast<unsigned int>(time(0)));

    // Generate a random number of requests (between 5 and 10)
    n = rand() % 6 + 5;
    cout << "Simulating " << n << " requests:\n";

    // Generate random request sequence (between 0 and 199)
    RQ.clear();
    for (int i = 0; i < n; i++) {
        RQ.push_back(rand() % 200);  // Random number between 0 and 199
    }

    // Generate a random initial head position (between 0 and 199)
    initial = rand() % 200;
    cout << "Generated request sequence: ";
    for (int req : RQ) {
        cout << req << " ";
    }
    cout << "\nGenerated initial head position: " << initial << endl;
}

int main() {
    int n, initial, TotalHeadMoment = 0, count = 0;
    vector<int> RQ;

    // Simulate input values
    simulateInput(n, RQ, initial);

    // Display accepted input
    cout << "\nAccepted Input:" << endl;
    cout << "--------------------------" << endl;
    cout << "Request Sequence: ";
    for (int req : RQ) {
        cout << req << " ";
    }
    cout << "\nInitial Head Position: " << initial << endl;

    // Process disk scheduling using Shortest Seek First (SSF)
    while (count != n) {
        int min = 1000, d, index;

        // Find the closest request to the current head position
        for (int i = 0; i < n; i++) {
            d = abs(RQ[i] - initial);
            if (min > d) {
                min = d;
                index = i;
            }
        }

        // Add the seek time to total head movement
        TotalHeadMoment += min;
        initial = RQ[index];

        // Mark this request as processed by setting it to a high value
        RQ[index] = 1000;
        count++;
    }

    cout << "\nTotal head movement is " << TotalHeadMoment << endl;

    return 0;
}



### Detailed Code Explanation:

#### **1. `simulateInput()` Function**:
This function generates the simulated input data used for the disk scheduling algorithm:

- **Random Number of Requests (`n`)**:
  - A random number of disk requests between 5 and 10 is generated.
  - This is done using the `rand()` function, where `rand() % 6` generates values between 0 and 5. Adding 5 ensures that the result will always be between 5 and 10 requests.

- **Random Disk Request Sequence (`RQ`)**:
  - A sequence of random disk track numbers is generated. These values are between 0 and 199, representing the possible track numbers on the disk.
  - The requests are stored in a vector `RQ`, which is populated by randomly generating each request using `rand() % 200`.

- **Random Initial Head Position (`initial`)**:
  - The initial head position (starting position of the disk arm) is also randomly chosen between 0 and 199.
  - This is done by generating a random value between 0 and 199 using `rand() % 200`.

#### **2. `main()` Function**:
The `main()` function coordinates the flow of the program, generates the simulated input, and applies the Shortest Seek First (SSF) disk scheduling algorithm to process the requests.

- **Simulated Input Generation**:
  - The `simulateInput()` function is called to generate the random number of requests, the request sequence, and the initial head position. These values are displayed on the console.
  
- **Displaying Accepted Input**:
  - The generated disk requests and initial head position are printed, providing a clear view of the input used for the disk scheduling algorithm.

- **Shortest Seek First (SSF) Algorithm**:
  - **Loop to Process Requests**:
    The algorithm processes the disk requests by finding the closest request to the current head position and moving the disk head accordingly. This process continues until all requests have been serviced.
  
    1. **Finding the Closest Request**:
       - A loop runs through all the requests in the `RQ` vector, and for each request, the absolute difference between the request's position and the current head position is calculated.
       - The request with the minimum seek time (smallest distance from the current head position) is selected. This is the fundamental idea behind the Shortest Seek First (SSF) algorithm.
       - For example, if the head is at track 50, the algorithm will find the request closest to track 50.

    2. **Calculating Seek Time**:
       - The seek time for each move is calculated as the absolute difference between the current head position and the request's track number:
         \[
         \text{Seek Time} = | \text{Current Head Position} - \text{Request Position} |
         \]
       - This value is accumulated in the `TotalHeadMoment` variable, which tracks the total seek time for the entire sequence of moves.

    3. **Updating Head Position**:
       - Once the closest request is selected, the head is moved to that request’s track. The position of the head is updated.
       - After servicing the request, it is marked as "processed" by setting its value to a large value (1000 in this case), ensuring it is not processed again.

    4. **Repeating the Process**:
       - The loop continues to process the remaining requests until all requests are serviced (`count == n`).

- **Output**:
  - Once all requests are processed, the program prints the total head movement (total seek time), which is the sum of the seek times for all the individual moves made by the disk arm.

### Example Flow (With Random Values):
Let’s walk through an example with the following simulated values:
- **Generated Requests**: 98, 183, 37, 122, 14, 124, 65, 67
- **Initial Head Position**: 50

1. **Step 1**: Head at 50:
   - Closest request is 37 (seek time = 50 - 37 = 13).
   - Move the head to 37. Total head movement = 13.

2. **Step 2**: Head at 37:
   - Closest request is 65 (seek time = 65 - 37 = 28).
   - Move the head to 65. Total head movement = 13 + 28 = 41.

3. **Step 3**: Head at 65:
   - Closest request is 67 (seek time = 67 - 65 = 2).
   - Move the head to 67. Total head movement = 41 + 2 = 43.

4. **Step 4**: Head at 67:
   - Closest request is 98 (seek time = 98 - 67 = 31).
   - Move the head to 98. Total head movement = 43 + 31 = 74.

5. **Step 5**: Head at 98:
   - Closest request is 122 (seek time = 122 - 98 = 24).
   - Move the head to 122. Total head movement = 74 + 24 = 98.

6. **Step 6**: Head at 122:
   - Closest request is 124 (seek time = 124 - 122 = 2).
   - Move the head to 124. Total head movement = 98 + 2 = 100.

7. **Step 7**: Head at 124:
   - Closest request is 183 (seek time = 183 - 124 = 59).
   - Move the head to 183. Total head movement = 100 + 59 = 159.

8. **Step 8**: Head at 183:
   - Closest request is 14 (seek time = 183 - 14 = 169).
   - Move the head to 14. Total head movement = 159 + 169 = 328.

- **Total Seek Time**: The total seek time (total head movement) after processing all requests is **328**.

### Theoretical Explanation:

#### **Disk Scheduling**:
Disk scheduling refers to the algorithm that determines the order in which disk I/O requests are processed. Efficient disk scheduling improves system performance by minimizing the time the disk arm takes to move to the requested tracks.

- **Seek Time**: The time it takes for the disk arm to move to the requested track. Optimizing seek time helps reduce overall disk I/O latency.
  
- **Efficiency**: The more efficiently the disk arm is moved, the less time is spent servicing requests, resulting in better performance.

#### **Shortest Seek First (SSF) Algorithm**:
The **SSF** algorithm aims to minimize seek time by always selecting the closest request. It works as follows:
1. The head moves to the closest request at each step.
2. This minimizes the seek time for each move, leading to lower total seek time in most cases.
3. However, the SSF algorithm may cause **starvation**, where requests further from the current head position may get delayed indefinitely if closer requests are always selected.

#### **SCAN Algorithm vs. SSF**:
- While SSF minimizes seek time locally (at each step), it doesn't take into account the overall pattern of requests across the entire disk.
- The **SCAN algorithm**, on the other hand, moves the head towards one end of the disk, servicing requests along the way, and then reverses direction once it reaches the end. This can reduce starvation but might not always minimize the seek time if requests are clustered in one part of the disk.

#### **Seek Time Calculation**:
- The **seek time** is the absolute difference between the current head position and the target track.
- The total seek time for the algorithm is the sum of all individual seek times for each move.

#### **Random Input Simulation**:
By generating random requests and head positions, the program simulates various real-world scenarios and tests how the SSF algorithm handles different distributions of disk I/O requests. This allows the algorithm’s efficiency to be observed in a controlled environment with different configurations of request patterns.
