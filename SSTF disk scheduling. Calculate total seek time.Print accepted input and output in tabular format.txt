19.⁠ ⁠Write a program to simulate SSTF disk scheduling. Calculate total seek time.Print accepted input and output in tabular format


#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>


std::tuple<int, std::vector<int>, std::vector<std::vector<int>>> sstfDiskScheduling(const std::vector<int>& requests, int headPosition) {
    std::vector<int> sortedRequests = requests;
    std::vector<int> acceptedRequests;
    std::vector<std::vector<int>> output;
    int totalSeekTime = 0;


    // Sort the requests in ascending order
    std::sort(sortedRequests.begin(), sortedRequests.end());


    while (!sortedRequests.empty()) {
        // Find the closest request to the current head position
        auto it = std::lower_bound(sortedRequests.begin(), sortedRequests.end(), headPosition);
        if (it == sortedRequests.begin()) {
            // Closest request is the first one in the sorted list
            totalSeekTime += std::abs(*it - headPosition);
            acceptedRequests.push_back(*it);
            output.push_back({headPosition, *it, std::abs(*it - headPosition)});
            headPosition = *it;
            sortedRequests.erase(it);
        } else {
            // Closest request is the previous one in the sorted list
            --it;
            totalSeekTime += std::abs(*it - headPosition);
            acceptedRequests.push_back(*it);
            output.push_back({headPosition, *it, std::abs(*it - headPosition)});
            headPosition = *it;
            sortedRequests.erase(it);
        }
    }


    return {totalSeekTime, acceptedRequests, output};
}


int main() {
    std::vector<int> requests = {176, 79, 34, 60, 92, 11, 41, 114};
    int headPosition = 50;


    int totalSeekTime;
    std::vector<int> acceptedRequests;
    std::vector<std::vector<int>> output;
    std::tie(totalSeekTime, acceptedRequests, output) = sstfDiskScheduling(requests, headPosition);


    std::cout << "Accepted Requests: ";
    for (int request : acceptedRequests) {
        std::cout << request << " ";
    }
    std::cout << std::endl;
    std::cout << "Total Seek Time: " << totalSeekTime << std::endl << std::endl;


    std::cout << "Input:" << std::endl;
    std::cout << "Head Position | Requests" << std::endl;
    std::cout << headPosition << " | ";
    for (int request : requests) {
        std::cout << request << ", ";
    }
    std::cout << std::endl << std::endl;


    std::cout << "Output:" << std::endl;
    std::cout << "Head Position | Disk Position | Seek Time" << std::endl;
    for (const auto& row : output) {
        std::cout << row[0] << " | " << row[1] << " | " << row[2] << std::endl;
    }


    return 0;
}