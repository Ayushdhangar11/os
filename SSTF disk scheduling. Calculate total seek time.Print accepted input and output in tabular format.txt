#include <iostream>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <ctime>

using namespace std;

void simulateInput(int &n, vector<int> &RQ, int &initial) {
    // Seed random number generator
    srand(static_cast<unsigned int>(time(0)));

    // Generate a random number of requests (between 5 and 10)
    n = rand() % 6 + 5;
    cout << "Simulating " << n << " requests:\n";

    // Generate random request sequence (between 0 and 199)
    RQ.clear();
    for (int i = 0; i < n; i++) {
        RQ.push_back(rand() % 200);  // Random number between 0 and 199
    }

    // Generate a random initial head position (between 0 and 199)
    initial = rand() % 200;
    cout << "Generated request sequence: ";
    for (int req : RQ) {
        cout << req << " ";
    }
    cout << "\nGenerated initial head position: " << initial << endl;
}

int main() {
    int n, initial, TotalHeadMoment = 0, count = 0;
    vector<int> RQ;

    // Simulate input values
    simulateInput(n, RQ, initial);

    // Display accepted input
    cout << "\nAccepted Input:" << endl;
    cout << "--------------------------" << endl;
    cout << "Request Sequence: ";
    for (int req : RQ) {
        cout << req << " ";
    }
    cout << "\nInitial Head Position: " << initial << endl;

    // Process disk scheduling using Shortest Seek First (SSF)
    while (count != n) {
        int min = 1000, d, index;

        // Find the closest request to the current head position
        for (int i = 0; i < n; i++) {
            d = abs(RQ[i] - initial);
            if (min > d) {
                min = d;
                index = i;
            }
        }

        // Add the seek time to total head movement
        TotalHeadMoment += min;
        initial = RQ[index];

        // Mark this request as processed by setting it to a high value
        RQ[index] = 1000;
        count++;
    }

    cout << "\nTotal head movement is " << TotalHeadMoment << endl;

    return 0;
}
