

- Readers-Writers Problem using Threads and Mutex

CODE - 
cpp
#include <stdio.h>
#include <stdbool.h>

struct semaphore {
    int mutex;   // 1: available, 0: in use
    int rcount;  // Number of active readers
    int rwait;   // Number of waiting readers
    bool wrt;    // Writer active flag
};

// Function to add a reader
void addR(struct semaphore *s) {
    if (s->mutex == 0 && s->rcount == 0) {
        printf("\nSorry, File open in Write mode.\nNew Reader added to queue.\n");
        s->rwait++;
    } else {
        printf("\nReader Process added.\n");
        s->rcount++;
        s->mutex--;
    }
    return;
}

// Function to add a writer
void addW(struct semaphore *s) {
    if (s->mutex == 1) {
        s->mutex--;
        s->wrt = 1;
        printf("\nWriter Process added.\n");
    } else if (s->wrt)
        printf("\nSorry, Writer already operational.\n");
    else
        printf("\nSorry, File open in Read mode.\n");
    return;
}

// Function to remove a reader
void remR(struct semaphore *s) {
    if (s->rcount == 0)
        printf("\nNo readers to remove.\n");
    else {
        printf("\nReader Removed.\n");
        s->rcount--;
        s->mutex++;
    }
    return;
}

// Function to remove a writer
void remW(struct semaphore *s) {
    if (s->wrt == 0)
        printf("\nNo Writer to Remove\n");
    else {
        printf("\nWriter Removed\n");
        s->mutex++;
        s->wrt = 0;
        if (s->rwait != 0) {
            s->mutex -= s->rwait;  // Allow waiting readers to proceed
            s->rcount = s->rwait;   // Set active readers count to waiting
            s->rwait = 0;           // Reset waiting readers count
            printf("%d waiting Readers Added.\n", s->rcount);
        }
    }
}

// Function to simulate various cases
void simulate(struct semaphore *s) {
    // Simulating adding 2 readers
    addR(s);  // Reader 1
    addR(s);  // Reader 2

    // Simulating adding a writer
    addW(s);  // Writer 1

    // Simulating removing 1 reader
    remR(s);  // Reader 1

    // Simulating adding 1 more reader
    addR(s);  // Reader 3

    // Simulating removing the writer
    remW(s);  // Writer 1

    // Simulating adding another reader and writer
    addR(s);  // Reader 4
    addW(s);  // Writer 2

    // Simulating removing all readers
    remR(s);  // Reader 2
    remR(s);  // Reader 3
    remR(s);  // Reader 4
}

int main() {
    struct semaphore S1 = {1, 0, 0, false}; // Initialize semaphore
    
    // Simulate predefined cases
    simulate(&S1);

    // Final state of the semaphore
    printf("\nFinal State ->\n\tMutex\t\t:\t%d\n\tActive Readers\t:\t%d\n\tWaiting Readers\t:\t%d\n\tWriter Active\t:\t%s\n\n",
           S1.mutex, S1.rcount, S1.rwait, (S1.wrt ? "YES" : "NO"));
    
    return 0;
}





-----------------------------------------------------------------------------------------

Q. Readers-Writers Problem using Threads and Semaphore

CODE - 
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <stdbool.h>

int shared_resource = 0;
int readers_count = 0;
bool writer_active = false;

sem_t resource_sem;
sem_t readers_count_sem;
sem_t queue_sem;

// Reader function
void *reader(void *arg) {
    long id = (long)arg;
    while (1) {
        sem_wait(&queue_sem);
        sem_wait(&readers_count_sem);
        readers_count++;
        if (readers_count == 1) {
            sem_wait(&resource_sem);
        }
        sem_post(&readers_count_sem);
        sem_post(&queue_sem);

        printf("Reader %ld enters critical section\n", id);
        printf("Reader %ld reads: %d\n", id, shared_resource);
        sleep(1);
        printf("Reader %ld exits critical section\n", id);
        
        sem_wait(&readers_count_sem);
        readers_count--;
        if (readers_count == 0) {
            sem_post(&resource_sem);
        }
        sem_post(&readers_count_sem);

        sleep(rand() % 3);
    }
    return NULL;
}

// Writer function
void *writer(void *arg) {
    long id = (long)arg;
    while (1) {
        sem_wait(&queue_sem);
        sem_wait(&resource_sem);
        writer_active = true;
        sem_post(&queue_sem);

        printf("Writer %ld enters critical section\n", id);
        shared_resource++;
        printf("Writer %ld writes: %d\n", id, shared_resource);
        sleep(1);
        printf("Writer %ld exits critical section\n", id);

        writer_active = false;
        sem_post(&resource_sem);

        sleep(rand() % 3);
    }
    return NULL;
}

// Simulation function to generate input values for the number of readers and writers
void simulate_input(int *num_readers, int *num_writers) {
    *num_readers = rand() % 5 + 1;  // Simulate 1 to 5 readers
    *num_writers = rand() % 3 + 1;  // Simulate 1 to 3 writers
    printf("Simulated input: %d readers, %d writers\n", *num_readers, *num_writers);
}

int main() {
    int num_readers, num_writers;

    // Simulate input values for the number of readers and writers
    simulate_input(&num_readers, &num_writers);

    // Initialize semaphores
    sem_init(&resource_sem, 0, 1);
    sem_init(&readers_count_sem, 0, 1);
    sem_init(&queue_sem, 0, 1);

    // Allocate memory for reader and writer threads
    pthread_t *readers = (pthread_t*)malloc(num_readers * sizeof(pthread_t));
    pthread_t *writers = (pthread_t*)malloc(num_writers * sizeof(pthread_t));
    int *reader_ids = (int*)malloc(num_readers * sizeof(int));
    int *writer_ids = (int*)malloc(num_writers * sizeof(int));

    // Create reader threads
    for (int i = 0; i < num_readers; i++) {
        reader_ids[i] = i;
        pthread_create(&readers[i], NULL, reader, (void*)(long)i); // Cast to long
    }

    // Create writer threads
    for (int i = 0; i < num_writers; i++) {
        writer_ids[i] = i;
        pthread_create(&writers[i], NULL, writer, (void*)(long)i); // Cast to long
    }

    // Simulate for a fixed time (e.g., 30 seconds)
    sleep(30);

    // Cancel and join reader threads
    for (int i = 0; i < num_readers; i++) {
        pthread_cancel(readers[i]);
        pthread_join(readers[i], NULL);
    }

    // Cancel and join writer threads
    for (int i = 0; i < num_writers; i++) {
        pthread_cancel(writers[i]);
        pthread_join(writers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&resource_sem);
    sem_destroy(&readers_count_sem);
    sem_destroy(&queue_sem);

    // Free allocated memory
    free(readers);
    free(writers);
    free(reader_ids);
    free(writer_ids);

    return 0;
}






