

- Readers-Writers Problem using Threads and Mutex

CODE - 
cpp
#include <stdio.h>
#include <stdbool.h>

struct semaphore {
    int mutex;   // 1: available, 0: in use
    int rcount;  // Number of active readers
    int rwait;   // Number of waiting readers
    bool wrt;    // Writer active flag
};

// Function to add a reader
void addR(struct semaphore *s) {
    if (s->mutex == 0 && s->rcount == 0) {
        printf("\nSorry, File open in Write mode.\nNew Reader added to queue.\n");
        s->rwait++;
    } else {
        printf("\nReader Process added.\n");
        s->rcount++;
        s->mutex--;
    }
    return;
}

// Function to add a writer
void addW(struct semaphore *s) {
    if (s->mutex == 1) {
        s->mutex--;
        s->wrt = 1;
        printf("\nWriter Process added.\n");
    } else if (s->wrt)
        printf("\nSorry, Writer already operational.\n");
    else
        printf("\nSorry, File open in Read mode.\n");
    return;
}

// Function to remove a reader
void remR(struct semaphore *s) {
    if (s->rcount == 0)
        printf("\nNo readers to remove.\n");
    else {
        printf("\nReader Removed.\n");
        s->rcount--;
        s->mutex++;
    }
    return;
}

// Function to remove a writer
void remW(struct semaphore *s) {
    if (s->wrt == 0)
        printf("\nNo Writer to Remove\n");
    else {
        printf("\nWriter Removed\n");
        s->mutex++;
        s->wrt = 0;
        if (s->rwait != 0) {
            s->mutex -= s->rwait;  // Allow waiting readers to proceed
            s->rcount = s->rwait;   // Set active readers count to waiting
            s->rwait = 0;           // Reset waiting readers count
            printf("%d waiting Readers Added.\n", s->rcount);
        }
    }
}

// Function to simulate various cases
void simulate(struct semaphore *s) {
    // Simulating adding 2 readers
    addR(s);  // Reader 1
    addR(s);  // Reader 2

    // Simulating adding a writer
    addW(s);  // Writer 1

    // Simulating removing 1 reader
    remR(s);  // Reader 1

    // Simulating adding 1 more reader
    addR(s);  // Reader 3

    // Simulating removing the writer
    remW(s);  // Writer 1

    // Simulating adding another reader and writer
    addR(s);  // Reader 4
    addW(s);  // Writer 2

    // Simulating removing all readers
    remR(s);  // Reader 2
    remR(s);  // Reader 3
    remR(s);  // Reader 4
}

int main() {
    struct semaphore S1 = {1, 0, 0, false}; // Initialize semaphore
    
    // Simulate predefined cases
    simulate(&S1);

    // Final state of the semaphore
    printf("\nFinal State ->\n\tMutex\t\t:\t%d\n\tActive Readers\t:\t%d\n\tWaiting Readers\t:\t%d\n\tWriter Active\t:\t%s\n\n",
           S1.mutex, S1.rcount, S1.rwait, (S1.wrt ? "YES" : "NO"));
    
    return 0;
}

This code simulates the **Readers-Writers problem** using a semaphore structure with mutexes and flags to manage the synchronization between readers and writers.

### Key Concepts:
1. **Semaphore Structure**:
   - `mutex`: 1 if the resource (file) is available, 0 if in use. This controls access to the file.
   - `rcount`: The number of active readers currently reading the file.
   - `rwait`: The number of readers waiting to access the file.
   - `wrt`: A boolean flag indicating whether a writer is currently active (1 if a writer is active, 0 otherwise).

2. **Reader Operations**:
   - **addR**: Adds a reader to the system. If no writer is active (`mutex == 1`), the reader can proceed; otherwise, it waits in the queue.
   - **remR**: Removes a reader from the system and updates the `mutex` and `rcount`. If no readers are left, the `mutex` is incremented, allowing a writer to access the resource.

3. **Writer Operations**:
   - **addW**: Adds a writer. If no reader or writer is active (`mutex == 1` and `wrt == 0`), the writer gets the resource; otherwise, it waits.
   - **remW**: Removes a writer and checks if any waiting readers exist. If there are waiting readers, they are allowed to access the resource.

4. **Simulation**:
   - The `simulate` function simulates the addition and removal of readers and writers.
     - Two readers are added, then a writer is added.
     - One reader is removed, and then another reader is added.
     - The writer is removed, and additional readers and writers are added.

### Code Flow:
- The program begins by initializing the semaphore with:
  - `mutex = 1`: The resource is initially available.
  - `rcount = 0`: No readers are active.
  - `rwait = 0`: No readers are waiting.
  - `wrt = false`: No writer is active.

- The `simulate` function runs a sequence of adding and removing readers and writers:
  1. It adds two readers.
  2. It adds a writer (this will block if a reader is reading).
  3. It removes one reader.
  4. It adds another reader.
  5. It removes the writer.
  6. It adds another reader and a writer.
  7. Finally, it removes all readers and the writer.

- The program prints the final state of the semaphore after the simulation.

### Example Output:
The output of the simulation will show the status of the system as readers and writers are added and removed, ensuring mutual exclusion between the writer and the readers.

### Final State:
- The `mutex` value indicates whether the resource is available.
- The number of active readers (`rcount`) and waiting readers (`rwait`) show the state of readers trying to access the resource.
- The `wrt` value shows whether the writer is active or not.

This simulation models a basic form of synchronization where readers can access the resource concurrently, but writers need exclusive access. If a writer is active, readers are blocked, and vice versa.

The **Readers-Writers Problem** is a classic synchronization problem in computer science. It involves a scenario where multiple threads (or processes) need to read and write shared data, but access to that data must be carefully controlled to prevent conflicts or errors.

### The Problem Setup
- **Readers**: These are threads that want to **read** shared data. Multiple threads can read the data at the same time, so long as no one is writing to it.
- **Writers**: These are threads that want to **write** to the shared data. Only one writer can access the data at a time, and no reader can access it while a writer is writing.

The challenge is to balance the needs of the readers and writers, ensuring that:
1. **Multiple readers** can read simultaneously if no writers are writing.
2. **Only one writer** can write at a time, and while writing, no readers should be allowed to read.

### Key Concepts
- **Concurrency**: This involves multiple threads running at the same time. The key challenge is managing shared data among threads in a way that prevents problems.
- **Mutual Exclusion (Mutex)**: This is a mechanism to ensure that only one thread at a time can access a particular section of code (critical section). A mutex is used to lock a shared resource (like a file or variable) so that no other thread can access it at the same time.

### Solution Using Mutexes
1. **For Readers**: Since reading doesn't alter the shared data, multiple threads can read the data concurrently, but only if no thread is writing. To manage this, the system uses a **mutex** to ensure that no writer is writing while readers are accessing the data.
   
2. **For Writers**: Writers must have exclusive access to the shared resource. To achieve this, the system ensures that no other threads (readers or writers) can access the shared data when a writer is working. This is done by locking the shared resource for the writer.

### Simplified Explanation of the Solution
- A **mutex** is used to lock the shared resource when a writer is working.
- A **read count** is used to track how many threads are currently reading. If any readers are present, a writer will be blocked.
- A **read-write lock** (a special type of mutex) may be used to allow multiple readers to access the resource concurrently, but only one writer can access it at a time, and it blocks all readers while writing.

### Example Scenario
Imagine you have a bank account system where multiple people (threads) can check the balance (readers) but only one person can deposit or withdraw money (writers).

- If several people are just checking the balance (reading), they can do this at the same time.
- But if one person wants to withdraw money (write), no one else can check the balance or make transactions at the same time.

To manage this, we can use:
- A mutex to prevent more than one person from withdrawing at the same time.
- A read count to prevent people from checking the balance while a withdrawal is happening.

### Types of Reader-Writer Problems
1. **First Readers-Writers Problem**: Readers should have priority over writers, meaning that if there are waiting readers, they should be allowed to proceed, even if writers are waiting.
2. **Second Readers-Writers Problem**: Writers should have priority over readers, meaning if there is a writer waiting, no new readers should be allowed to start until the writer gets access.

The goal of the Reader-Writer problem is to efficiently manage access to shared data in a way that balances the needs of reading and writing threads while preventing conflicts and deadlock.



-----------------------------------------------------------------------------------------

Q. Readers-Writers Problem using Threads and Semaphore

CODE - 
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <stdbool.h>

int shared_resource = 0;
int readers_count = 0;
bool writer_active = false;

sem_t resource_sem;
sem_t readers_count_sem;
sem_t queue_sem;

// Reader function
void *reader(void *arg) {
    long id = (long)arg;
    while (1) {
        sem_wait(&queue_sem);
        sem_wait(&readers_count_sem);
        readers_count++;
        if (readers_count == 1) {
            sem_wait(&resource_sem);
        }
        sem_post(&readers_count_sem);
        sem_post(&queue_sem);

        printf("Reader %ld enters critical section\n", id);
        printf("Reader %ld reads: %d\n", id, shared_resource);
        sleep(1);
        printf("Reader %ld exits critical section\n", id);
        
        sem_wait(&readers_count_sem);
        readers_count--;
        if (readers_count == 0) {
            sem_post(&resource_sem);
        }
        sem_post(&readers_count_sem);

        sleep(rand() % 3);
    }
    return NULL;
}

// Writer function
void *writer(void *arg) {
    long id = (long)arg;
    while (1) {
        sem_wait(&queue_sem);
        sem_wait(&resource_sem);
        writer_active = true;
        sem_post(&queue_sem);

        printf("Writer %ld enters critical section\n", id);
        shared_resource++;
        printf("Writer %ld writes: %d\n", id, shared_resource);
        sleep(1);
        printf("Writer %ld exits critical section\n", id);

        writer_active = false;
        sem_post(&resource_sem);

        sleep(rand() % 3);
    }
    return NULL;
}

// Simulation function to generate input values for the number of readers and writers
void simulate_input(int *num_readers, int *num_writers) {
    *num_readers = rand() % 5 + 1;  // Simulate 1 to 5 readers
    *num_writers = rand() % 3 + 1;  // Simulate 1 to 3 writers
    printf("Simulated input: %d readers, %d writers\n", *num_readers, *num_writers);
}

int main() {
    int num_readers, num_writers;

    // Simulate input values for the number of readers and writers
    simulate_input(&num_readers, &num_writers);

    // Initialize semaphores
    sem_init(&resource_sem, 0, 1);
    sem_init(&readers_count_sem, 0, 1);
    sem_init(&queue_sem, 0, 1);

    // Allocate memory for reader and writer threads
    pthread_t *readers = (pthread_t*)malloc(num_readers * sizeof(pthread_t));
    pthread_t *writers = (pthread_t*)malloc(num_writers * sizeof(pthread_t));
    int *reader_ids = (int*)malloc(num_readers * sizeof(int));
    int *writer_ids = (int*)malloc(num_writers * sizeof(int));

    // Create reader threads
    for (int i = 0; i < num_readers; i++) {
        reader_ids[i] = i;
        pthread_create(&readers[i], NULL, reader, (void*)(long)i); // Cast to long
    }

    // Create writer threads
    for (int i = 0; i < num_writers; i++) {
        writer_ids[i] = i;
        pthread_create(&writers[i], NULL, writer, (void*)(long)i); // Cast to long
    }

    // Simulate for a fixed time (e.g., 30 seconds)
    sleep(30);

    // Cancel and join reader threads
    for (int i = 0; i < num_readers; i++) {
        pthread_cancel(readers[i]);
        pthread_join(readers[i], NULL);
    }

    // Cancel and join writer threads
    for (int i = 0; i < num_writers; i++) {
        pthread_cancel(writers[i]);
        pthread_join(writers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&resource_sem);
    sem_destroy(&readers_count_sem);
    sem_destroy(&queue_sem);

    // Free allocated memory
    free(readers);
    free(writers);
    free(reader_ids);
    free(writer_ids);

    return 0;
}

### Explanation of the Code and OS Concepts

This code simulates the **Readers-Writers Problem** using **threads** and **semaphores**. The main goal is to manage access to a shared resource (in this case, `shared_resource`) such that multiple readers can access it simultaneously, but writers must have exclusive access to it. The system also uses semaphores to handle synchronization and mutual exclusion.

### Key Concepts Used in the Code:
1. **Threads**:
   - Threads are lightweight units of execution within a process. In this code, each reader and writer runs in its own thread.
   
2. **Semaphore**:
   - A **semaphore** is a synchronization primitive used to control access to a shared resource by multiple threads. It is used to prevent race conditions and ensure that certain critical sections of code are not accessed simultaneously by multiple threads.
   - There are two types of semaphores used in this code:
     - **Counting Semaphore**: Used to track the number of readers (`readers_count_sem`), ensuring the resource is accessed safely by multiple readers.
     - **Binary Semaphore (Mutex)**: Used to allow only one writer to access the shared resource at a time (`resource_sem`), preventing conflicting access.

3. **Critical Section**:
   - A **critical section** is a part of the code that accesses shared resources, and it should be executed by only one thread at a time to avoid data inconsistency or corruption.

4. **Mutual Exclusion (Mutex)**:
   - Mutual exclusion ensures that only one thread can access a shared resource at any given time. The mutex semaphores (`resource_sem` and `queue_sem`) are used here to enforce this.

### Code Breakdown:

1. **Global Variables**:
   - `shared_resource`: The shared resource that both readers and writers access. Initially set to 0.
   - `readers_count`: Keeps track of the number of active readers (threads that are reading the shared resource).
   - `writer_active`: A boolean flag to track whether a writer is currently active (writing to the shared resource).
   
2. **Semaphores**:
   - `resource_sem`: A binary semaphore used for mutual exclusion when a writer is accessing the `shared_resource`. It ensures that only one writer can access the resource at a time.
   - `readers_count_sem`: A counting semaphore used to manage access to `readers_count` safely. It ensures that multiple readers can modify this count without conflict.
   - `queue_sem`: A binary semaphore used to avoid starvation and prevent race conditions when accessing the semaphore values (mainly ensuring writers and readers do not interrupt each other when adjusting their counts or waiting).

3. **Reader Thread Function** (`reader`):
   - A reader enters the critical section if no writers are active, or if it’s the first reader. It increments the `readers_count` and waits for the resource lock if it’s the first reader.
   - The reader can then access the shared resource, print its value, and after finishing, it decrements the reader count.
   - If it's the last reader exiting, it releases the lock on the shared resource, allowing a writer to enter.
   
4. **Writer Thread Function** (`writer`):
   - A writer waits for exclusive access to the shared resource using the `resource_sem` binary semaphore, ensuring no readers or other writers can access it.
   - Once the writer has access, it modifies the `shared_resource`, prints the new value, and exits the critical section.

5. **Simulating Input** (`simulate_input`):
   - This function randomly simulates the number of readers and writers (between 1 and 5 readers, and 1 to 3 writers).

6. **Thread Creation**:
   - Threads for readers and writers are created using `pthread_create` and passed their respective functions (`reader` and `writer`).
   - Each reader and writer thread runs in an infinite loop, performing its task (reading or writing) until the simulation ends.

7. **Simulation**:
   - After creating the threads, the simulation runs for 30 seconds, during which the readers and writers repeatedly access the shared resource.
   - The threads are canceled and joined at the end of the simulation to clean up and stop their execution.

8. **Memory Management**:
   - Memory for the threads and their IDs is allocated dynamically using `malloc` and freed at the end of the program to avoid memory leaks.

9. **Semaphore Cleanup**:
   - The semaphores are destroyed using `sem_destroy` to clean up system resources when the simulation is done.

### OS Concepts Used in the Code:

1. **Concurrency**:
   - Multiple threads are executing concurrently. The OS manages the scheduling and execution of these threads.

2. **Synchronization**:
   - The code uses **semaphores** to synchronize access to the shared resource, ensuring that multiple readers or a single writer can access the shared resource safely without causing data inconsistency.

3. **Deadlock Prevention**:
   - The code ensures that threads do not enter a deadlock situation (where threads are waiting indefinitely for each other). By using semaphores (`queue_sem`), the threads can wait in an orderly manner, avoiding circular waiting and ensuring progress.

4. **Mutual Exclusion**:
   - The semaphores (`resource_sem`) are used to implement mutual exclusion, ensuring that only one writer can access the shared resource at a time.

5. **Starvation Prevention**:
   - The semaphore `queue_sem` is used to prevent starvation (where one type of thread, either readers or writers, might never get to access the shared resource). Writers can get a chance to write even if many readers are waiting.

### Summary:
- This code solves the **Readers-Writers Problem** using threads and semaphores by ensuring proper synchronization between readers and writers. The **reader threads** can access the shared resource simultaneously, as long as no writer is active. The **writer threads** are given exclusive access to the shared resource to avoid conflicts. The semaphores control the access to shared resources and synchronization between threads, making sure that the program behaves correctly in a multithreaded environment.




