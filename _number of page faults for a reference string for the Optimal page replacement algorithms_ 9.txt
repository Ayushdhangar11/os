17 #include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>


using namespace std;


// Function to calculate the index of the page to be replaced using Optimal Page Replacement
int findOptimalReplacement(const vector<int> &pages, const unordered_set<int> &frames, int currentIndex) {
    int farthest = currentIndex;
    int pageToReplace = -1;


    for (int framePage : frames) {
        int nextUse = -1;


        // Find the next occurrence of each page in frames
        for (int j = currentIndex + 1; j < pages.size(); j++) {
            if (pages[j] == framePage) {
                nextUse = j;
                break;
            }
        }


        // If a page is not used again, it should be replaced
        if (nextUse == -1) {
            return framePage;
        }


        // Choose the page that won't be used for the longest time
        if (nextUse > farthest) {
            farthest = nextUse;
            pageToReplace = framePage;
        }
    }
    return pageToReplace;
}


// Function to calculate page faults using Optimal Page Replacement
int calculatePageFaults(const vector<int> &pages, int frameSize) {
    unordered_set<int> frames;
    int pageFaults = 0;


    for (int i = 0; i < pages.size(); i++) {
        int page = pages[i];


        // If page is not in frame, a page fault occurs
        if (frames.find(page) == frames.end()) {
            // If frame is full, find the optimal page to replace
            if (frames.size() == frameSize) {
                int pageToReplace = findOptimalReplacement(pages, frames, i);
                frames.erase(pageToReplace);
            }
            // Add the current page to the frames
            frames.insert(page);
            pageFaults++;
        }
    }


    return pageFaults;
}


int main() {
    int n, frameSize;


    cout << "Enter the number of pages in the reference string: ";
    cin >> n;
    vector<int> pages(n);


    cout << "Enter the reference string: ";
    for (int i = 0; i < n; i++) {
        cin >> pages[i];
    }


    cout << "Enter the number of frames: ";
    cin >> frameSize;


    int pageFaults = calculatePageFaults(pages, frameSize);
    cout << "Number of page faults: " << pageFaults << endl;


    return 0;
}